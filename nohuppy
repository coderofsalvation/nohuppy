#!/bin/sh
set -e
required="awk lsof readlink nohup socat dirname find"
ME="$(readlink -f $(dirname $0))/nohuppy"
#trap "trigger cleanup" 0 1 2 3 6
C_GREY="\\033[1;30m"
C_BOLD="\\033[1;37;40m"
C_NORMAL="\\033[0;0m"
C_CYAN="\\033[1;36m"
C_PURPLE="\\033[38;5;207m"
C_RED="\\033[0;31m"

# install: loginctl enable-linger $USER
# nc: sleep/wakeup bwrap /project/app.sh
# nc git pull bwrap /project/app.sh kill -9 $(lsof nohup.out | awk 'NR == 2 { print $2 }') # killing app nohup $(cat app.sh) & # start daemon
# ssh: bwrap /project bash 

# some hipster wrappers to make things readable and sexy later on
try()        { set +e; "$@"; set -e; return 0;     }
silent()     { "$@" 1>/dev/null 2>/dev/null; return $?; }
installed()  { which $1 2>/dev/null 1>/dev/null;   }
verbose()    { printf "  $C_BOLD\$$C_NORMAL $*\n"; "$@"; }
debug()      { set -x; "$@"; set +x; }
prompt()     { printf " [?] $C_CYAN$1$C_NORMAL"; printf "\n$2\n  $3> "; read answer; }
error()      { printf " [$C_RED"e"$C_NORMAL] %s\n" "$*"; exit 1; }
print()      { printf "  $C_PURPLE│ $C_NORMAL %s\n" "$*"; return 0; }
soften()     { cat | while IFS='' read line; do printf "  $C_PURPLE| $C_GREY%s$C_NORMAL\n" "$line"; done; }
header()     { h=$1; shift; printf "  $C_PURPLE├─ $C_CYAN""%s""$C_PURPLE $C_NORMAL%s\n" "$h" "$*"; }
evalfunc()   { type $1 | awk 'NR>2 && /^[^{][^}]/ { print $0 }'; }
on()         { export on_$1="$2 $(eval echo \$on_$1)"; }
foreach()    { local err=0; local args="$1"; 
               shift; 
               for j in $args; do "$@" "$j" || err=1; done
               test $err = 1 && return 1 || return 0
             }

trigger()    { printf "$C_NORMAL [$C_CYAN✓$C_NORMAL] $C_BOLD%s$C_NORMAL\n" "$1"
               local cmd=$1; shift
               local actions="$(eval echo \$on_$cmd)"
               set +e
               if test -n "$actions"; then 
                 silent try type $cmd && { $cmd "$@"; }
                 for it in $actions; do trigger $it "$@"; done 
               else 
                 silent type $cmd || return 0; 
                 silent type $cmd && $cmd "$@"; 
               fi 
               set -e
               return $?
             }

install(){ # install           : allow process to keep running after logout 
  debug sudo loginctl enable-linger $(whoami)
}

foreach_app_do(){
  dir=$1 ; shift
  find $dir -name "app.sh" | while read app; do 
    print "[✓] $app"
    silent cd $(dirname $app) 
    "$@"
    silent cd -
  done
}

start(){ # start [dir]             : starts ./app.sh [recursive] in background
  test -z $1        || { try foreach_app_do $1 start; return 0; }
  test -f app.sh    || error "$(pwd)/app.sh not found"
  test -f nohup.out && { lsof nohup.out || error "$(pwd)/app.sh already running"; }
  nohup ./app.sh 2>&1 &
  test -f .port && test -f .on.http && {
    print "listening at port $(cat .port) => .on.http"
    nohup $ME http 2>&1 &
	}
}

stop(){ # stop [dir]                : stops ./app.sh [recursive]
  test -z $1 || { try foreach_app_do $1 stop; return 0; }
  test -f nohup.out || return 0 
  pids=$(lsof nohup.out | awk 'NR > 1 {printf("%s ",$2)}')
  print ' | kill -9 '$pids
  kill -9 ${pids}
  rm nohup.out
}

restart(){ # restart             : runs stop & start
  test -z $1 || { try foreach_app_do $1 restart; return 0; }
  test -f nohup.out || return 0 
  stop && start 
}

ps(){ # ps                      : checks if process is running
  test -z $1 || { try foreach_app_do $1 ps; }
  test -f app.sh || error "$(pwd)/app.sh not found"
  lsof nohup.out || print "app not running" 
}


logs(){ # logs                 : show logs of ./app.sh
  test -f nohup.out || error "$(pwd)/nohup.out logfile not found)"
  tail nohup.out "$@"
}

http(){ # http                 : receive trigger from http
  test -f .port     || { read -p "enter portnumber: " freeport; echo $freeport > .port && print "created '.port'"; }
  test -f .parallel || { read -p "enter max parallel processes: " max; echo $max > .parallel && print "created '.parallel'"; }
  test -f .on.http  || { echo 'read -r url && echo .on.http: received $url from $SOCAT_PEERADDR' > .on.http && print "created '.on.http'"; }
  chmod +x .on.http
	PORT=$(cat .port)
	PARALLEL=$(cat .port)
  print listening on $PORT [max $(cat .parallel) processes]
  print to trigger .on.http run: curl http://127.0.0.1:$PORT --http0.9
  socat -t2 TCP4-LISTEN:$PORT,fork,max-children=$PARALLEL,forever,reuseaddr exec:"./.on.http",pipes,pty,echo=0;
}

usage(){
  echo "usage: "
  awk '/[a-zA-Z0-9_]+\(\){ #/ { 
    info=$0 
    gsub(".* : ","",info)
    gsub(".*{ # ","",$0)
    gsub(" :.*","",$0)
    printf("    %-25s %s\n",$0,info)
  }' $0 2>/dev/null
  echo 
  exit 0
}

foreach "$required" installed || error "please install: $required" 
test -z $1 && usage
trigger "$@"
